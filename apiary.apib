FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# sessions_service

The Sessions Service provides facilities to create a session, tie a
session to one or more user IDs, tie a session to one or more
third-party identities, and create and authenticate login
credentials via a separate Authentication Service.


## Root [/]

The root path returns a map of available service endpoints. External
services can query the root path for a directory of
endpoints, rather than hard-code URLs, allowing for more flexible
service discovery and use.

### Retrieve the entry points [GET]

+ Request JSON Message
    + Headers
    
            Accept: application/vnd.api+json
            
+ Response 200 (application/vnd.api+json)

        {
            "v1": {
                "credentialsUrl":   "/api/v1/sessions/:id/credentials",
                "loginsUrl":        "/api/v1/sessions/:id/logins",
                "identitiesUrl":    "/api/v1/sessions/:id/identities",
                "sessionUrl":       "/api/v1/sessions/:id",
                "sessionsUrl":      "/api/v1/sessions"
            }
        }

+ Response 401 (application/vnd.api+json)

+ Response 406 (application/vnd.api+json)

        {
            "error": "Accept header is not application/vnd.api+json"
        }


## Sessions [/api/v1/sessions]

A session represents a visit to the site. Each visit is tied
to a person and the visit represents that person until the 
person destroys the visit or the visit is purged upon expiration. 

### Create a new Session [POST]

Request a new session ID and user ID pair.

This action returns a 200 status code and a JSON body.

+ Response 201 (application/vnd.api+json)
    + Attributes
        - session (Session)

+ Response 403 (application/vnd.api+json)


## Session [/api/v1/sessions/{session_id}]

+ Parameters
    + session_id: `12345` (number, required) - ID of the Session

### Get an existing Session [GET]

Find all information associated with a session ID.

Success returns a 200 status code and a JSON body.

+ Response 200 (application/vnd.api+json)
    + Attributes
        - session (Session)

+ Response 401 (application/vnd.api+json)

+ Response 404 (application/vnd.api+json)

### Delete an existing Session[DELETE]

Destroy an existing session and all credentials associated with it.

+ Response 202 (application/vnd.api+json)
    + Attributes
        - session (Session)

+ Response 404 (application/vnd.api+json)


## Identity [/api/v1/sessions/{session_id}/identities]

### Request a new Oauth-based identity[POST]

+ Request
    + Attributes
        - type (Identity, required)

+ Response 201 (application/vnd.api+json)
    + Attributes
        - session (Session)
        - redirect_uri (string)

+ Response 401 (application/vnd.api+json)

+ Response 403 (application/vnd.api+json)

+ Response 409 (application/vnd.api+json)


## Login [/api/v1/sessions/{session_id}/logins]

+ Parameter
    + session_id: `12345` (number, required)

### Create a new Login [POST]

+ Request (application/json)
    + Attributes
        - login (Login)

+ Response 201 (application/vnd.api+json)
    + Attributes
        - session (Session)

+ Response 401 (application/vnd.api+json)

+ Response 403 (application/vnd.api+json)

+ Response 409 (application/vnd.api+json)

### Authenticate an existing Login [GET]

+ Request (application/json)
    + Attributes
        - login (Login)

+ Response 200 (application/vnd.api+json)
    + Attributes
        - session (Session)

+ Response 401 (application/vnd.api+json)


## Credential [/api/v1/sessions/{session_id}/credentials]

+ Parameter
    + session_id: `12345` (number, required)

### Create a new Credential [POST]

+ Request (application/json)
    + Attributes
        - credential (Credential)

+ Response 201 (application/vnd.api+json)
    + Attributes
        - session (Session)

+ Response 401 (application/vnd.api+json)

+ Response 403 (application/vnd.api+json)

+ Response 404 (application/vnd.api+json)

### Lookup an existing Credential [GET]

+ Request (application/json)
    + Attributes
        - credential (Credential, required)

+ Response 200 (application/vnd.api+json)
    + Attributes
        - session (Session)

+ Response 401 (application/vnd.api+json)

+ Response 403 (application/vnd.api+json)

+ Response 404 (application/vnd.api+json)

### Delete an existing Credential [DELETE]

+ Request (application/json)
    + Attributes
        - credential (Credential, required)

+ Response 200 (application/vnd.api+json)
    + Attributes
        - session (Session)

+ Response 401 (application/vnd.api+json)

+ Response 403 (application/vnd.api+json)
        
+ Response 404 (application/vnd.api+json)


# Data Structures

## Credential (object)

- user_id: `abcdefgh123` (string, required) - The unique ID of the user.
- type (enum[string], required)
    - facebook - A user created via Facebook.
    - twitter - A user created via Twitter.
    - google - A user created via Google.
    - login - A user created via the site directly.


## Identity (object)

- type (enum[string], required)
    - facebook - A user created via Facebook.
    - twitter - A user created via Twitter.
    - google - A user created via Google.


## Login (object)

- email: `joe@example.org` (string, required) - An email address.
- password: `password` (string, required) - A password.


## Session (object)

- session_id: `12345` (number, required) - The session ID.
- credentials (array[Credential], required)